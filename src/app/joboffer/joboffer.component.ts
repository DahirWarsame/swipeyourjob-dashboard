import {Title} from '@angular/platform-browser';
import {Component, OnInit, OnChanges, ViewChild, ElementRef} from '@angular/core';
import {PasswordValidator} from 'app/_helpers/passwordvalidator';
import {AuthService, TokenStorageService} from '@app/services';
import {any} from 'codelyzer/util/function';
import {concat} from 'rxjs';

@Component({
  selector: 'app-verification',
  templateUrl: './joboffer.component.html',
  styleUrls: ['./joboffer.component.css']
})
export class JobofferComponent implements OnInit {
  form: any = {
    tagInput: null,
    password: null
  };
  tags: any = [];
  tagField: any;
  htmlForTags = '';
  passwordchecks: any = {
    passwordCapitalCheck: false,
    passwordNumberCheck: false,
    passwordLengthCheck: false
  };
  dialogChecks: any = {
    passwordDialog: false
  };
  isLoggedIn = false;
  wagesInputEnabled: any = {
    wages16: false,
    wages17: false,
    wages18: false,
    wages19: false,
    wages20: false,
    wages21: false
  };
  setPeriod = false;

  constructor(private titleService: Title) {
  }

  ngOnInit(): void {
    this.titleService.setTitle('SwipeYourJob - Vacature');
    return;
  }

  onCheck(values: any, age: string): void {
    const value = values.currentTarget.checked;
    switch (age) {
      case 'wages16': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      case 'wages17': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      case 'wages18': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      case 'wages19': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      case 'wages20': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      case 'wages21': {
        this.wagesInputEnabled.wages16 = value;
        break;
      }
      default: {
        break;
      }
    }
    console.log(values.currentTarget.checked);
    console.log(this.wagesInputEnabled);
  }

  addTag(): void {
    // Runs when the button 'Voeg tag toe' is clicked
    const {tagInput} = this.form;
    this.tags.push(tagInput);

    this.updateTags();

    const tagsInput: HTMLElement | null = document.getElementById('tags') as HTMLInputElement;
    if (tagsInput as HTMLInputElement) {
      const typescriptIsKut = tagsInput as HTMLInputElement;
      typescriptIsKut.value = '';
    }
  }

  updateTags(): void {
    // Updates the visible list of all the tags so it matches the array with all the tags
    const tagsHtml: any[] = [];
    const htmlTagList: any = document.getElementById('selected-tag-list');
    // tslint:disable-next-line:only-arrow-functions
    htmlTagList.innerHTML = '';
    this.tags.forEach((value: any) => {
      this.addSingleTag(value);
    });
  }

  addSingleTag(value: any): any {
    // Add the html element for a single tag
    const tagElement = document.createElement('div');
    tagElement.textContent = value;

    const button = document.createElement('button');
    button.className = 'btn btn-primary btn-small';
    button.textContent = 'x';

    tagElement.appendChild(button);
    const selectedTagList: HTMLElement | null = document.getElementById('selected-tag-list');
    if (selectedTagList) {
      selectedTagList.appendChild(tagElement);
    } else {
      console.log('Error generated by programmer: Cannot find element with ID \'selected-tag-list\'');
    }

    button.setAttribute('data-tagvalue', value);

    button.addEventListener('click', (event) => {
      const key = this.tags.find((element: any) => element == value);
      const index = this.tags.indexOf(key, 0);
      if (index > -1) {
        this.tags.splice(index, 1);
      }
      console.log(value);
      this.updateTags();
      console.log(this.tags);
    });
  }

  onSetPeriod(value: any): void {
    this.setPeriod = value;
    console.log('switch date picker visibility');
    console.log(value);
  }

  onSubmit(): void {
  }
}
